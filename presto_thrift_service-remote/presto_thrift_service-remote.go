// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/blunghamer/presto"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

var _ = presto.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "   prestoListSchemaNames()")
	fmt.Fprintln(os.Stderr, "   prestoListTables(PrestoThriftNullableSchemaName schemaNameOrNull)")
	fmt.Fprintln(os.Stderr, "  PrestoThriftNullableTableMetadata prestoGetTableMetadata(PrestoThriftSchemaTableName schemaTableName)")
	fmt.Fprintln(os.Stderr, "  PrestoThriftSplitBatch prestoGetSplits(PrestoThriftSchemaTableName schemaTableName, PrestoThriftNullableColumnSet desiredColumns, PrestoThriftTupleDomain outputConstraint, i32 maxSplitCount, PrestoThriftNullableToken nextToken)")
	fmt.Fprintln(os.Stderr, "  PrestoThriftSplitBatch prestoGetIndexSplits(PrestoThriftSchemaTableName schemaTableName,  indexColumnNames,  outputColumnNames, PrestoThriftPageResult keys, PrestoThriftTupleDomain outputConstraint, i32 maxSplitCount, PrestoThriftNullableToken nextToken)")
	fmt.Fprintln(os.Stderr, "  PrestoThriftPageResult prestoGetRows(PrestoThriftId splitId,  columns, i64 maxBytes, PrestoThriftNullableToken nextToken)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := presto.NewPrestoThriftServiceClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "prestoListSchemaNames":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "PrestoListSchemaNames requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.PrestoListSchemaNames(context.Background()))
		fmt.Print("\n")
		break
	case "prestoListTables":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PrestoListTables requires 1 args")
			flag.Usage()
		}
		arg50 := flag.Arg(1)
		mbTrans51 := thrift.NewTMemoryBufferLen(len(arg50))
		defer mbTrans51.Close()
		_, err52 := mbTrans51.WriteString(arg50)
		if err52 != nil {
			Usage()
			return
		}
		factory53 := thrift.NewTJSONProtocolFactory()
		jsProt54 := factory53.GetProtocol(mbTrans51)
		argvalue0 := presto.NewPrestoThriftNullableSchemaName()
		err55 := argvalue0.Read(jsProt54)
		if err55 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PrestoListTables(context.Background(), value0))
		fmt.Print("\n")
		break
	case "prestoGetTableMetadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PrestoGetTableMetadata requires 1 args")
			flag.Usage()
		}
		arg56 := flag.Arg(1)
		mbTrans57 := thrift.NewTMemoryBufferLen(len(arg56))
		defer mbTrans57.Close()
		_, err58 := mbTrans57.WriteString(arg56)
		if err58 != nil {
			Usage()
			return
		}
		factory59 := thrift.NewTJSONProtocolFactory()
		jsProt60 := factory59.GetProtocol(mbTrans57)
		argvalue0 := presto.NewPrestoThriftSchemaTableName()
		err61 := argvalue0.Read(jsProt60)
		if err61 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PrestoGetTableMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "prestoGetSplits":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "PrestoGetSplits requires 5 args")
			flag.Usage()
		}
		arg62 := flag.Arg(1)
		mbTrans63 := thrift.NewTMemoryBufferLen(len(arg62))
		defer mbTrans63.Close()
		_, err64 := mbTrans63.WriteString(arg62)
		if err64 != nil {
			Usage()
			return
		}
		factory65 := thrift.NewTJSONProtocolFactory()
		jsProt66 := factory65.GetProtocol(mbTrans63)
		argvalue0 := presto.NewPrestoThriftSchemaTableName()
		err67 := argvalue0.Read(jsProt66)
		if err67 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg68 := flag.Arg(2)
		mbTrans69 := thrift.NewTMemoryBufferLen(len(arg68))
		defer mbTrans69.Close()
		_, err70 := mbTrans69.WriteString(arg68)
		if err70 != nil {
			Usage()
			return
		}
		factory71 := thrift.NewTJSONProtocolFactory()
		jsProt72 := factory71.GetProtocol(mbTrans69)
		argvalue1 := presto.NewPrestoThriftNullableColumnSet()
		err73 := argvalue1.Read(jsProt72)
		if err73 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg74 := flag.Arg(3)
		mbTrans75 := thrift.NewTMemoryBufferLen(len(arg74))
		defer mbTrans75.Close()
		_, err76 := mbTrans75.WriteString(arg74)
		if err76 != nil {
			Usage()
			return
		}
		factory77 := thrift.NewTJSONProtocolFactory()
		jsProt78 := factory77.GetProtocol(mbTrans75)
		argvalue2 := presto.NewPrestoThriftTupleDomain()
		err79 := argvalue2.Read(jsProt78)
		if err79 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err80 := (strconv.Atoi(flag.Arg(4)))
		if err80 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		arg81 := flag.Arg(5)
		mbTrans82 := thrift.NewTMemoryBufferLen(len(arg81))
		defer mbTrans82.Close()
		_, err83 := mbTrans82.WriteString(arg81)
		if err83 != nil {
			Usage()
			return
		}
		factory84 := thrift.NewTJSONProtocolFactory()
		jsProt85 := factory84.GetProtocol(mbTrans82)
		argvalue4 := presto.NewPrestoThriftNullableToken()
		err86 := argvalue4.Read(jsProt85)
		if err86 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.PrestoGetSplits(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "prestoGetIndexSplits":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "PrestoGetIndexSplits requires 7 args")
			flag.Usage()
		}
		arg87 := flag.Arg(1)
		mbTrans88 := thrift.NewTMemoryBufferLen(len(arg87))
		defer mbTrans88.Close()
		_, err89 := mbTrans88.WriteString(arg87)
		if err89 != nil {
			Usage()
			return
		}
		factory90 := thrift.NewTJSONProtocolFactory()
		jsProt91 := factory90.GetProtocol(mbTrans88)
		argvalue0 := presto.NewPrestoThriftSchemaTableName()
		err92 := argvalue0.Read(jsProt91)
		if err92 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg93 := flag.Arg(2)
		mbTrans94 := thrift.NewTMemoryBufferLen(len(arg93))
		defer mbTrans94.Close()
		_, err95 := mbTrans94.WriteString(arg93)
		if err95 != nil {
			Usage()
			return
		}
		factory96 := thrift.NewTJSONProtocolFactory()
		jsProt97 := factory96.GetProtocol(mbTrans94)
		containerStruct1 := presto.NewPrestoThriftServicePrestoGetIndexSplitsArgs()
		err98 := containerStruct1.ReadField2(jsProt97)
		if err98 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.IndexColumnNames
		value1 := argvalue1
		arg99 := flag.Arg(3)
		mbTrans100 := thrift.NewTMemoryBufferLen(len(arg99))
		defer mbTrans100.Close()
		_, err101 := mbTrans100.WriteString(arg99)
		if err101 != nil {
			Usage()
			return
		}
		factory102 := thrift.NewTJSONProtocolFactory()
		jsProt103 := factory102.GetProtocol(mbTrans100)
		containerStruct2 := presto.NewPrestoThriftServicePrestoGetIndexSplitsArgs()
		err104 := containerStruct2.ReadField3(jsProt103)
		if err104 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.OutputColumnNames
		value2 := argvalue2
		arg105 := flag.Arg(4)
		mbTrans106 := thrift.NewTMemoryBufferLen(len(arg105))
		defer mbTrans106.Close()
		_, err107 := mbTrans106.WriteString(arg105)
		if err107 != nil {
			Usage()
			return
		}
		factory108 := thrift.NewTJSONProtocolFactory()
		jsProt109 := factory108.GetProtocol(mbTrans106)
		argvalue3 := presto.NewPrestoThriftPageResult_()
		err110 := argvalue3.Read(jsProt109)
		if err110 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg111 := flag.Arg(5)
		mbTrans112 := thrift.NewTMemoryBufferLen(len(arg111))
		defer mbTrans112.Close()
		_, err113 := mbTrans112.WriteString(arg111)
		if err113 != nil {
			Usage()
			return
		}
		factory114 := thrift.NewTJSONProtocolFactory()
		jsProt115 := factory114.GetProtocol(mbTrans112)
		argvalue4 := presto.NewPrestoThriftTupleDomain()
		err116 := argvalue4.Read(jsProt115)
		if err116 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		tmp5, err117 := (strconv.Atoi(flag.Arg(6)))
		if err117 != nil {
			Usage()
			return
		}
		argvalue5 := int32(tmp5)
		value5 := argvalue5
		arg118 := flag.Arg(7)
		mbTrans119 := thrift.NewTMemoryBufferLen(len(arg118))
		defer mbTrans119.Close()
		_, err120 := mbTrans119.WriteString(arg118)
		if err120 != nil {
			Usage()
			return
		}
		factory121 := thrift.NewTJSONProtocolFactory()
		jsProt122 := factory121.GetProtocol(mbTrans119)
		argvalue6 := presto.NewPrestoThriftNullableToken()
		err123 := argvalue6.Read(jsProt122)
		if err123 != nil {
			Usage()
			return
		}
		value6 := argvalue6
		fmt.Print(client.PrestoGetIndexSplits(context.Background(), value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "prestoGetRows":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "PrestoGetRows requires 4 args")
			flag.Usage()
		}
		arg124 := flag.Arg(1)
		mbTrans125 := thrift.NewTMemoryBufferLen(len(arg124))
		defer mbTrans125.Close()
		_, err126 := mbTrans125.WriteString(arg124)
		if err126 != nil {
			Usage()
			return
		}
		factory127 := thrift.NewTJSONProtocolFactory()
		jsProt128 := factory127.GetProtocol(mbTrans125)
		argvalue0 := presto.NewPrestoThriftId()
		err129 := argvalue0.Read(jsProt128)
		if err129 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg130 := flag.Arg(2)
		mbTrans131 := thrift.NewTMemoryBufferLen(len(arg130))
		defer mbTrans131.Close()
		_, err132 := mbTrans131.WriteString(arg130)
		if err132 != nil {
			Usage()
			return
		}
		factory133 := thrift.NewTJSONProtocolFactory()
		jsProt134 := factory133.GetProtocol(mbTrans131)
		containerStruct1 := presto.NewPrestoThriftServicePrestoGetRowsArgs()
		err135 := containerStruct1.ReadField2(jsProt134)
		if err135 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Columns
		value1 := argvalue1
		argvalue2, err136 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err136 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg137 := flag.Arg(4)
		mbTrans138 := thrift.NewTMemoryBufferLen(len(arg137))
		defer mbTrans138.Close()
		_, err139 := mbTrans138.WriteString(arg137)
		if err139 != nil {
			Usage()
			return
		}
		factory140 := thrift.NewTJSONProtocolFactory()
		jsProt141 := factory140.GetProtocol(mbTrans138)
		argvalue3 := presto.NewPrestoThriftNullableToken()
		err142 := argvalue3.Read(jsProt141)
		if err142 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.PrestoGetRows(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
